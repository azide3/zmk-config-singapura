// Copyright 2023 saikocat (@saikocat)
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_settings {
            bindings = <&to 1>;
            key-positions = <31 32 24>;
        };

        combo_pp {
            bindings = <&kp C_PP>;
            key-positions = <4 5>;
        };

        combo_EXCLAMATION {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 2>;
        };

        combo_AT_SIGN {
            bindings = <&kp AT>;
            key-positions = <2 3>;
        };

        combo_HASH {
            bindings = <&kp HASH>;
            key-positions = <1 12>;
        };

        combo_DOLLAR {
            bindings = <&kp DOLLAR>;
            key-positions = <12 3>;
        };

        combo_PERCENT {
            bindings = <&kp PERCENT>;
            key-positions = <1 3>;
        };

        combo_CARET {
            bindings = <&kp CARET>;
            key-positions = <6 8>;
        };

        combo_AMPERSAND {
            bindings = <&kp AMPERSAND>;
            key-positions = <6 17>;
        };

        combo_ASTERISK {
            bindings = <&kp ASTERISK>;
            key-positions = <17 8>;
        };

        combo_LEFT_PARENTHESIS {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        combo_RIGHT_PARENTHESIS {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        combo_VOLUME_UP {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <22 23>;
        };

        combo_VOLUME_DOWN {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <20 21>;
        };

        combo_MUTE {
            bindings = <&kp C_MUTE>;
            key-positions = <21 22>;
        };

        combo_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 9>;
        };

        combo_dash {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <19 29>;
        };

        combo_multiply {
            bindings = <&kp ASTERISK>;
            key-positions = <28 19>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
        };
    };

    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            label = "BASE";
            bindings = <
     &kp Q         &kp W  &gqt LG(E) E    &gqt LG(R) R          &gqt LG(T) T                 &kp Y   &gqt LG(U) U             &gqt LG(I) I                      &kp O           &kp P
&gqt TAB A         &kp S   &gqt LALT D     &gqt LGUI F          &gqt LCTRL G           &gqt LALT H    &gqt LGUI J             &gqt LG(K) K               &gqt LG(L) L        &kp SEMI
     &kp Z  &gqt LG(X) X  &gqt LG(C) C    &gqt LG(V) V          &gqt LG(B) B          &gqt LG(N) N          &kp M  &gqt LEFT_BRACKET COMMA  &gqt RIGHT_BRACKET PERIOD  &gqt BSLH FSLH
                                &trans  &kp LEFT_SHIFT  &gqt LS(ENTER) ENTER  &gqt LG(SPACE) SPACE  &kp BACKSPACE                   &trans
 &kp SPACE        &kp UP      &kp LEFT       &kp RIGHT              &kp DOWN              &kp DOWN      &kp RIGHT                 &kp LEFT                     &kp UP       &kp SPACE
            >;
        };

        layer_1 {
            bindings = <
&bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &bt BT_CLR        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans        &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};

// vim: ft=dts et
