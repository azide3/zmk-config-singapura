// Copyright 2023 saikocat (@saikocat)
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <35>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_settings {
            timeout-ms = <35>;
            bindings = <&to 1>;
            key-positions = <31 32 24>;
        };

        combo_pp {
            timeout-ms = <35>;
            bindings = <&kp C_PP>;
            key-positions = <4 5>;
        };

        combo_LEFT_PARENTHESIS {
            timeout-ms = <35>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        combo_RIGHT_PARENTHESIS {
            timeout-ms = <35>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        combo_VOLUME_UP {
            timeout-ms = <35>;
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <22 23>;
        };

        combo_VOLUME_DOWN {
            timeout-ms = <35>;
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <21 20>;
        };

        combo_MUTE {
            timeout-ms = <35>;
            bindings = <&kp C_MUTE>;
            key-positions = <21 22>;
        };

        combo_plus {
            timeout-ms = <35>;
            bindings = <&kp KP_PLUS>;
            key-positions = <19 29>;
        };

        combo_multiply {
            timeout-ms = <35>;
            bindings = <&kp ASTERISK>;
            key-positions = <28 19>;
        };

        combo_equal {
            timeout-ms = <35>;
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
        };

        combo_no1 {
            timeout-ms = <35>;
            bindings = <&kp N1>;
            key-positions = <34 26>;
        };

        combo_no2 {
            timeout-ms = <35>;
            bindings = <&kp N2>;
            key-positions = <34 27>;
        };

        combo_no3 {
            bindings = <&kp N3>;
            key-positions = <34 28>;
        };

        combo_no4 {
            timeout-ms = <35>;
            bindings = <&kp N4>;
            key-positions = <34 16>;
        };

        combo_no5 {
            timeout-ms = <35>;
            bindings = <&kp N5>;
            key-positions = <34 17>;
        };

        combo_no6 {
            timeout-ms = <35>;
            bindings = <&kp N6>;
            key-positions = <34 18>;
        };

        combo_no7 {
            timeout-ms = <35>;
            bindings = <&kp N7>;
            key-positions = <34 6>;
        };

        combo_no8 {
            timeout-ms = <35>;
            bindings = <&kp N8>;
            key-positions = <34 7>;
        };

        combo_no9 {
            timeout-ms = <35>;
            bindings = <&kp N9>;
            key-positions = <34 8>;
        };

        combo_no0 {
            timeout-ms = <35>;
            bindings = <&kp N0>;
            key-positions = <9 34>;
        };

        combo_leftscreen {
            timeout-ms = <35>;
            bindings = <&kp LC(LEFT)>;
            key-positions = <10 0>;
        };

        combo_rightscreen {
            timeout-ms = <35>;
            bindings = <&kp LC(RIGHT)>;
            key-positions = <4 14>;
        };

        combo_nexttrack {
            timeout-ms = <35>;
            bindings = <&kp C_NEXT>;
            key-positions = <21 22 23>;
        };

        combo_prevtrack {
            timeout-ms = <35>;
            bindings = <&kp C_PREV>;
            key-positions = <20 21 22>;
        };

        combo_optleft {
            timeout-ms = <35>;
            bindings = <&kp LA(LEFT)>;
            key-positions = <10 11>;
        };

        combo_optright {
            timeout-ms = <35>;
            bindings = <&kp LA(RIGHT)>;
            key-positions = <14 13>;
        };

        combo_changelang {
            timeout-ms = <35>;
            bindings = <&kp LC(SPACE)>;
            key-positions = <14 13 15 16>;
        };

        combo_up {
            timeout-ms = <35>;
            bindings = <&kp UP>;
            key-positions = <2 12>;
        };

        combo_down {
            timeout-ms = <35>;
            bindings = <&kp DOWN>;
            key-positions = <12 22>;
        };

        combo_left {
            timeout-ms = <35>;
            bindings = <&kp LEFT>;
            key-positions = <11 12>;
        };

        combo_right {
            timeout-ms = <35>;
            bindings = <&kp RIGHT>;
            key-positions = <12 13>;
        };

        combo_spaces {
            timeout-ms = <35>;
            bindings = <&kp LC(UP)>;
            key-positions = <1 3>;
        };

        combo_to0 {
            timeout-ms = <35>;
            bindings = <&to 0>;
            key-positions = <31 32>;
        };

        combo_screenshot {
            timeout-ms = <35>;
            bindings = <&kp LG(LS(N4))>;
            key-positions = <0 20 9 29>;
        };

        combo_cmd_left {
            timeout-ms = <35>;
            bindings = <&kp LG(LEFT)>;
            key-positions = <2 1>;
        };

        combo_cmd_right {
            timeout-ms = <35>;
            bindings = <&kp LG(RIGHT)>;
            key-positions = <3 2>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        combo_macro_skmr {
            bindings = <&macro_skmr>;
            key-positions = <34 26 31 23>;
        };
    };

    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    macros {
        macro_skmr: macro_skmr {
            compatible = "zmk,behavior-macro";
            label = "MACRO_SKMR";
            #binding-cells = <0>;
            bindings = <&none &kp LS(I) &kp SPACE &kp F &kp E &kp E &kp L &kp SPACE &kp L &kp I &kp K &kp E &kp SPACE &kp W &kp E &kp SPACE &kp H &kp A &kp V &kp E &kp SPACE &kp G &kp O &kp N &kp E &kp SPACE &kp P &kp A &kp S &kp T &kp SPACE &kp S &kp O &kp C &kp I &kp A &kp L &kp SPACE &kp N &kp O &kp R &kp M &kp S &kp SPACE &kp H &kp A &kp H &kp H &kp A &kp A &kp H &kp A &kp H &kp H &kp H>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            label = "BASE";
            bindings = <
     &kp Q         &kp W  &gqt LG(E) E    &gqt LG(R) R          &gqt LG(T) T                 &kp Y   &gqt LG(U) U             &gqt LG(I) I                      &kp O   &gqt SINGLE_QUOTE P
&gqt TAB A         &kp S   &gqt LALT D     &gqt LGUI F          &gqt LCTRL G           &gqt LALT H    &gqt LGUI J             &gqt LG(K) K               &gqt LG(L) L  &gqt MINUS SEMICOLON
     &kp Z  &gqt LG(X) X  &gqt LG(C) C    &gqt LG(V) V          &gqt LG(B) B          &gqt LG(N) N          &kp M  &gqt LEFT_BRACKET COMMA  &gqt RIGHT_BRACKET PERIOD        &gqt BSLH FSLH
                                &trans  &kp LEFT_SHIFT  &gqt LS(ENTER) ENTER  &gqt LG(SPACE) SPACE  &kp BACKSPACE                   &trans
 &kp SPACE        &kp UP      &kp LEFT       &kp RIGHT              &kp DOWN              &kp DOWN      &kp RIGHT                 &kp LEFT                     &kp UP             &kp SPACE
            >;
        };

        layer_1 {
            bindings = <
&bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
       &to 2         &to 3        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &bt BT_CLR        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans        &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&gqt Q NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &gqt R NUMBER_4  &gqt NUMBER_0 NUMBER_5  &trans  &trans  &trans  &trans  &trans
       &gqt G D  &kp LEFT_ARROW     &kp RIGHT  &gqt LEFT_GUI F                   &kp M  &trans  &trans  &trans  &trans  &trans
          &kp Z          &trans  &gqt LG(C) C     &gqt LG(V) V                   &kp B  &trans  &trans  &trans  &trans  &trans
                                       &trans   &kp LEFT_SHIFT               &kp ENTER  &trans  &trans  &trans
      &kp SPACE    &kp UP_ARROW      &kp LEFT        &kp RIGHT                &kp DOWN  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
    &kp D         &kp J         &kp LG(K)            &kp L  &kp BACKSPACE  &trans  &trans  &trans  &trans  &trans
&kp LC(J)         &kp Y             &kp I  &gqt LEFT_GUI O          &kp M  &trans  &trans  &trans  &trans  &trans
    &kp Z        &trans  &gqt LG(C) MINUS  &gqt LG(V) PLUS  &kp LC(LS(E))  &trans  &trans  &trans  &trans  &trans
                                   &trans   &kp LEFT_SHIFT      &kp SPACE  &trans  &trans  &trans
&kp SPACE  &kp UP_ARROW          &kp LEFT        &kp RIGHT       &kp DOWN  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};

// vim: ft=dts et
